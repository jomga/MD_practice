import requests
import pandas as pd
from datetime import date

def run(api_key:str, vault_name:str, project_name:str, search_name:str):
  
    def get_CDD_id(api_key:str, query:str, query_type:str, vault_id:str):
        headers = {'X-CDD-token':api_key}

        base_url = "https://app.collaborativedrug.com/api/v1/vaults"

        if query_type == 'vaults':
            id_list = requests.request("GET", base_url, headers=headers)
            
            id_list_df = pd.DataFrame(id_list.json())
            query_id = id_list_df[id_list_df['name'] == query]['id'].iloc[0]

        else:
            url = base_url + f'/{vault_id}/{query_type}'
            id_list = requests.request("GET", url, headers=headers)
            
            id_list_df = pd.DataFrame(id_list.json())
            query_id = id_list_df[id_list_df['name'] == query]['id'].iloc[0]
        
        return query_id
  
  
    def get_CDD_search(api_key:str, vault_id:str, project_id:str, search_id:str):
        today = date.today()
        time = today.strftime("%d%m%Y")
        
        headers = {'X-CDD-token':api_key}
        
        if project_id == 'none':
            url = f'https://app.collaborativedrug.com/api/v1/vaults/{vault_id}/searches/{search_id}?format=csv'
        else:
            url = f'https://app.collaborativedrug.com/api/v1/vaults/{vault_id}/searches/{search_id}?projects={project_id}&format=csv'

        search_prep_out = requests.request("GET", url, headers=headers)
        export_id = search_prep_out.json()['id']

        url = f'https://app.collaborativedrug.com/api/v1/vaults/{vault_id}/export_progress/{export_id}'

        done = False
        while done == False:
            export_status = requests.request("GET", url, headers=headers).json()["status"]
            if "finished" in export_status or "downloaded" in export_status:
                done = True

        url = f'https://app.collaborativedrug.com/api/v1/vaults/{vault_id}/exports/{export_id}'

        response = requests.request("GET", url, headers=headers)

        csv_data_str = response.content.decode('utf-8')

        response_df = pd.read_csv(pd.io.common.StringIO(csv_data_str))

        return response_df
  
  
    def get_CDD_mols(api_key, vault_id, project_id, mol_names, batch_fields):
  
        headers = {'X-CDD-token':api_key}
  
        url = f'https://app.collaborativedrug.com/api/v1/vaults/{vault_id}/molecules'

        data = {"names": mol_names}

        data["page_size"] = len(mol_names.split(','))

        if project_id != 'none':
            data["projects"] = str(project_id)

        if batch_fields == 'none':
            data["only_batch_ids"] = "true"
        if batch_fields != "all" and batch_fields != "none":
            data["batch_fields"] = batch_fields

        response = requests.request("GET", url, headers=headers, json=data)
        response_df = pd.DataFrame(response.json()["objects"])
        
        return response_df

  
    ###Get Vault ID
    vault_id = get_CDD_id(api_key, vault_name, 'vaults', 'none')

    ###Get Project ID
    project_id = get_CDD_id(api_key, project_name, 'projects', vault_id)

    ###Get Search ID
    search_id = get_CDD_id(api_key, search_name, 'searches', vault_id)

    ###Get Saved Search DF
    search_df = get_CDD_search(api_key, vault_id, project_id, search_id)
    search_df = search_df.rename(columns={'Molecule Name': 'name'})

    ###Create the File Name
    today = date.today()
    day = today.strftime("%d%m%Y")
    filename = f'{day}_{search_name}_CDD.csv'

    ###Create the File
    search_df.to_csv(filename, index=False)

    print(f"File '{filename}' downloaded successfully.")
